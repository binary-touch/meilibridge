# Configuration for cargo-deny
# More detailed explanations for each section can be found at:
# https://embarkstudios.github.io/cargo-deny/

[graph]
# Lint level for when multiple versions of the same dependency are detected
multiple-versions = "warn"

[licenses]
# List of explicitly allowed licenses
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
    "CC0-1.0",
    "Zlib",
]

# Blanket approval for all licenses used by this crate
confidence-threshold = 0.8

# List of explicitly disallowed licenses
deny = []

# Check for OSI-approved license
allow-osi-fsf-free = "neither"

[[licenses.exceptions]]
# The prometheus crate uses protobuf 2.28.0 which has a known vulnerability
# This is a temporary exception until prometheus updates to use protobuf 3.x
# See: https://github.com/tikv/rust-prometheus/issues/479
allow = ["Apache-2.0"]
name = "protobuf"
version = "2.28.0"

[bans]
# Lint level for when multiple versions of the same dependency are detected
multiple-versions = "warn"

# Deny specific crates
deny = []

# Skip certain crates when checking for duplicates
skip = []

# Similarly named crates that are allowed to coexist
allow = []

# Certain crates that are allowed to have multiple versions
[[bans.skip-tree]]
# The prometheus crate depends on an older protobuf version
# Skip checking its dependency tree for now
name = "prometheus"
version = "0.13"

[advisories]
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"

# The url(s) where the advisory databases are cloned from
db-urls = ["https://github.com/rustsec/advisory-db"]

# The lint level for security vulnerabilities
vulnerability = "deny"

# The lint level for unmaintained crates
unmaintained = "warn"

# The lint level for crates with security notices
notice = "warn"

# A list of advisory IDs to ignore
ignore = [
    # Ignore the protobuf vulnerability in prometheus dependency
    # This is a known issue and we're waiting for upstream fix
    # The vulnerability is in protobuf 2.x, fixed in 3.x
    # See: https://github.com/tikv/rust-prometheus/issues/479
    "RUSTSEC-2021-0127", # protobuf: Out of Memory in stream::read_raw_bytes_into()
]

[sources]
# Lint level for what to happen when a crate from a crate registry that is not in the allow list is encountered
unknown-registry = "warn"

# Lint level for what to happen when a crate from a git repository that is not in the allow list is encountered
unknown-git = "warn"

# List of allowed crate registries
allow-registry = ["https://github.com/rust-lang/crates.io-index"]

# List of allowed Git repositories
allow-git = []
